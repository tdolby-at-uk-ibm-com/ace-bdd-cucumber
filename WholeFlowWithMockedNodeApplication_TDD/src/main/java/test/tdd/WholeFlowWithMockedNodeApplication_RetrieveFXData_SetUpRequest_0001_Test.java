package test.tdd;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Test;

import com.ibm.integration.test.v1.NodeSpy;
import com.ibm.integration.test.v1.SpyObjectReference;
import com.ibm.integration.test.v1.TestMessageAssembly;
import com.ibm.integration.test.v1.TestSetup;
import com.ibm.integration.test.v1.exception.TestException;

import static com.ibm.integration.test.v1.Matchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.emptyString;
import static org.hamcrest.Matchers.equalTo;

public class WholeFlowWithMockedNodeApplication_RetrieveFXData_SetUpRequest_0001_Test {

	/*
	 * WholeFlowWithMockedNodeApplication_RetrieveFXData_SetUpRequest_0001_Test
	 * Test generated by IBM App Connect Enterprise Toolkit 12.0.5.0 on Jun 27, 2022 3:33:16 PM
	 */

	@AfterEach
	public void cleanupTest() throws TestException {
		// Ensure any mocks created by a test are cleared after the test runs 
		TestSetup.restoreAllMocks();
	}

	@Test
	public void WholeFlowWithMockedNodeApplication_RetrieveFXData_SetUpRequest_TestCase_001() throws TestException
	{
		// Define the SpyObjectReference
		SpyObjectReference nodeReference = new SpyObjectReference().application("WholeFlowWithMockedNodeApplication")
				.messageFlow("RetrieveFXData").node("SetUpRequest");

		// Initialise a NodeSpy
		NodeSpy nodeSpy = new NodeSpy(nodeReference);

		// Declare a new TestMessageAssembly object for the message being sent into the node
		// We use a blank body in this case, but could load a message assembly.
		TestMessageAssembly inputMessageAssembly = new TestMessageAssembly();

		// Add Local Environment to Message Assembly for HTTP; equivalent to
		// 
		// curl 'http://localhost:7800/retrieveFXData?from=GBP&to=USD'
		// 
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.QueryString.from").setValue("GBP");
		inputMessageAssembly.localEnvironmentPath("HTTP.Input.QueryString.to").setValue("USD");
		
		// Call the message flow node with the Message Assembly
		nodeSpy.evaluate(inputMessageAssembly, true, "in");

		// Assert the number of times that the node is called
		assertThat(nodeSpy, nodeCallCountIs(1));

		// Assert the terminal propagate count for the message
		assertThat(nodeSpy, terminalPropagateCountIs("out", 1));

        /* Compare Output Message 1 at output terminal out */
        TestMessageAssembly actualMessageAssembly = nodeSpy.propagatedMessageAssembly("out", 1);

        // Validate the results
        assertThat(actualMessageAssembly.localEnvironmentPath("Destination.HTTP.QueryString.function").getStringValue(), equalTo("CURRENCY_EXCHANGE_RATE"));
        assertThat(actualMessageAssembly.localEnvironmentPath("Destination.HTTP.QueryString.from_currency").getStringValue(), equalTo("GBP"));
        assertThat(actualMessageAssembly.localEnvironmentPath("Destination.HTTP.QueryString.to_currency").getStringValue(), equalTo("USD"));
        assertThat(actualMessageAssembly.localEnvironmentPath("Destination.HTTP.QueryString.apikey").getStringValue(), emptyString());
	}

}
